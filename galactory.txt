To configure your Rocky Linux instance to use a JFrog Artifactory instance as a local Ansible Galaxy server (via `galactory`) for running `ansible-lint` in an air-gapped environment, you need to set up Artifactory to store Ansible collections and configure Ansible to access them offline. Below is a step-by-step guide based on the provided web results and general knowledge of Ansible and Artifactory.

---

### Prerequisites
- **Rocky Linux**: Ensure your system is updated (`sudo dnf update`).
- **JFrog Artifactory**: A running instance with a generic repository for Ansible collections.
- **Ansible and ansible-lint**: Installed on your Rocky Linux instance.
- **Air-gapped environment**: No internet access, with all dependencies pre-downloaded and transferred to the system.
- **Galactory**: A tool to proxy Ansible Galaxy using Artifactory as the backend.

---

### Step-by-Step Configuration

#### 1. **Set Up Artifactory Repository**
   - **Create a Generic Repository in Artifactory**:
     - Log in to your Artifactory web UI (e.g., `http://<artifactory-host>:8081`).
     - Navigate to **Repositories > Repositories**, click **+ Add Repositories**, and select **Generic**.
     - Name the repository (e.g., `ansible-galaxy-repo`) and save.[](https://github.com/briantist/galactory)[](https://jfrog.com/blog/using-artifactory-with-an-air-gap/)
     - Ensure the repository is accessible to your Rocky Linux instance (e.g., via a local network in the air-gapped environment).
   - **Upload Ansible Collections**:
     - In an internet-connected environment, download required Ansible collections:
       ```bash
       ansible-galaxy collection download <namespace.collection> -p /path/to/collections
       ```
       This creates a `.tar.gz` file for the collection.[](https://www.ansiblepilot.com/articles/ansible-lint-in-air-gapped-environments)
     - Transfer the `.tar.gz` files to your air-gapped environment using secure media (e.g., USB drive).
     - Upload the collections to Artifactory:
       - In the Artifactory UI, navigate to the `ansible-galaxy-repo` repository.
       - Use the **Deploy** option to upload each `.tar.gz` file.
       - Alternatively, use the Artifactory REST API or CLI to upload:
         ```bash
         curl -u <username>:<password> -T /path/to/collections/namespace-collection-version.tar.gz \
         "http://<artifactory-host>:8081/artifactory/ansible-galaxy-repo/namespace/collection/version/namespace-collection-version.tar.gz"
         ```
     - Verify that all required collections (and their dependencies) are uploaded. Check the **Dependencies** tab in the collection’s documentation on Ansible Galaxy (if accessible) to ensure completeness.[](https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/2.4/html-single/red_hat_ansible_automation_platform_installation_guide/index)

#### 2. **Install and Configure Galactory**
   - **Install Galactory**:
     - Galactory is a Python-based Ansible Galaxy proxy that uses Artifactory as its backend.[](https://github.com/briantist/galactory)[](https://pypi.org/project/galactory/)
     - In an internet-connected environment, download the `galactory` package:
       ```bash
       pip download galactory -d /path/to/packages
       ```
     - Transfer the downloaded package (e.g., `galactory-<version>.tar.gz`) to your air-gapped Rocky Linux instance.
     - Install `galactory` on the Rocky Linux instance:
       ```bash
       sudo pip install /path/to/packages/galactory-<version>.tar.gz
       ```
     - Ensure Python dependencies (e.g., `requests`, `flask`) are also pre-downloaded and installed similarly.
   - **Configure Galactory**:
     - Run `galactory` to proxy your Artifactory repository:
       ```bash
       python -m galactory --artifactory-path "http://<artifactory-host>:8081/artifactory/ansible-galaxy-repo" \
       --listen-addr 0.0.0.0 --listen-port 8080 \
       [--artifactory-api-key <api-key> | --artifactory-access-token <token>]
       ```
       - Replace `<artifactory-host>` with your Artifactory server’s address.
       - Use either an API key or access token for authentication if required. If authentication is not needed, omit these flags.
       - The `--listen-addr` and `--listen-port` define where `galactory` serves the Galaxy API (e.g., `http://<rocky-linux-host>:8080`).
     - Optional flags (adjust as needed):
       - `--api-version v3`: Restrict to Galaxy API v3 (recommended for newer Ansible versions).[](https://github.com/briantist/galactory)
       - `--upload-format auto`: Automatically handle raw or base64-encoded uploads.[](https://pypi.org/project/galactory/)
     - For persistent operation, consider running `galactory` as a service using `systemd`:
       - Create a service file (`/etc/systemd/system/galactory.service`):
         ```ini
         [Unit]
         Description=Galactory Ansible Galaxy Proxy
         After=network.target

         [Service]
         ExecStart=/usr/bin/python3 -m galactory --artifactory-path http://<artifactory-host>:8081/artifactory/ansible-galaxy-repo --listen-addr 0.0.0.0 --listen-port 8080
         Restart=always

         [Install]
         WantedBy=multi-user.target
         ```
       - Enable and start the service:
         ```bash
         sudo systemctl enable galactory
         sudo systemctl start galactory
         ```

#### 3. **Configure Ansible to Use the Local Galaxy Server**
   - **Update Ansible Configuration**:
     - Edit the Ansible configuration file (`/etc/ansible/ansible.cfg`) to point to your local `galactory` server:
       ```ini
       [galaxy]
       server_list = local_galaxy

       [galaxy_server.local_galaxy]
       url = http://<rocky-linux-host>:8080/api/galaxy/
       ```
       - Replace `<rocky-linux-host>` with the IP or hostname of the machine running `galactory`.
       - If authentication is required, add credentials (e.g., token or username/password):
         ```ini
         token = <artifactory-api-key-or-token>
         ```
         or
         ```ini
         username = <artifactory-username>
         password = <artifactory-password>
         ```
       - Ensure no external Galaxy URLs (e.g., `https://galaxy.ansible.com`) are referenced.[](https://www.ansiblepilot.com/articles/ansible-lint-in-air-gapped-environments)[](https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/2.4/html-single/red_hat_ansible_automation_platform_installation_guide/index)
   - **Install Collections Locally**:
     - Install the pre-uploaded collections from Artifactory via `galactory`:
       ```bash
       ansible-galaxy collection install <namespace.collection> --offline -p /path/to/collections
       ```
       - The `--offline` flag ensures `ansible-galaxy` doesn’t attempt internet access.[](https://www.ansiblepilot.com/articles/ansible-lint-in-air-gapped-environments)
     - Verify the collection is installed:
       ```bash
       ansible-galaxy collection list
       ```
   - **Configure ansible-lint**:
     - Create or edit the `ansible-lint` configuration file (e.g., `~/.ansible-lint.yml` or `/etc/ansible-lint.yml`):
       ```yaml
       offline: true
       collections_paths: /path/to/collections
       ```
       - The `offline: true` setting ensures `ansible-lint` avoids external Galaxy calls.
       - Set `collections_paths` to the directory where collections are installed (e.g., `/path/to/collections`).
     - Check for any playbook rules that reference external URLs or dependencies and remove them.[](https://www.ansiblepilot.com/articles/ansible-lint-in-air-gapped-environments)

#### 4. **Test ansible-lint in the Air-Gapped Environment**
   - Run `ansible-lint` on a playbook to verify the setup:
     ```bash
     ansible-lint --offline /path/to/playbook.yml
     ```
     - The `--offline` flag ensures no external connections are attempted.[](https://www.ansiblepilot.com/articles/ansible-lint-in-air-gapped-environments)
   - If errors occur (e.g., missing dependencies), verify that all required collections are installed in `/path/to/collections` and listed in `ansible-lint`’s configuration.
   - Check the `galactory` logs (if configured with `--log-file`) for issues with API requests.

#### 5. **Troubleshooting Tips**
   - **Missing Dependencies**: If `ansible-lint` reports missing roles or collections, ensure all dependencies are pre-downloaded and uploaded to Artifactory. Use `ansible-galaxy collection download` in an internet-connected environment to capture all dependencies.[](https://www.ansiblepilot.com/articles/ansible-lint-in-air-gapped-environments)
   - **Authentication Issues**: If `galactory` or `ansible-galaxy` fails to authenticate with Artifactory, verify the API key or token in `ansible.cfg`. For roles, you may need to set `force_basic_auth: true` in `ansible-galaxy` requests (requires custom scripting or modifications).[](https://stackoverflow.com/questions/75986279/how-to-enable-force-basic-auth-in-ansible-galaxy-when-installing-roles)
   - **Galactory Errors**: Check the Artifactory repository path and ensure it’s accessible. Use `--log-level DEBUG` with `galactory` for detailed logs.[](https://github.com/briantist/galactory)
   - **Network Issues**: In an air-gapped environment, ensure the Rocky Linux instance can reach the Artifactory instance over the local network. Test with:
     ```bash
     curl http://<artifactory-host>:8081/artifactory/ansible-galaxy-repo
     ```

#### 6. **Additional Notes**
   - **Dependencies Management**: Some collections have dependencies that must also be downloaded and uploaded to Artifactory. Check the `galaxy.yml` file of each collection for dependencies.[](https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/2.4/html-single/red_hat_ansible_automation_platform_installation_guide/index)
   - **Galactory Limitations**: Galactory supports a subset of the Galaxy API (v2 and v3) and works with Artifactory OSS. Avoid features requiring a Pro license (e.g., `--use-property-fallback`).[](https://github.com/briantist/galactory)[](https://pypi.org/project/galactory/)
   - **Security**: Use secure transfer methods (e.g., encrypted USB drives) to move files to the air-gapped environment. Ensure Artifactory credentials are securely stored.[](https://jfrog.com/blog/using-artifactory-with-an-air-gap/)
   - **Ansible Version**: Ensure `ansible-core` is installed (available in Rocky Linux 9’s AppStream repository). For Rocky Linux 8, enable the EPEL repository first.[](https://www.ansiblepilot.com/articles/how-to-install-ansible-in-rocky-linux-9-ansible-install/)[](https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html)

---

### Example Workflow
1. On an internet-connected machine:
   ```bash
   ansible-galaxy collection download community.general -p /path/to/collections
   ```
2. Transfer `community-general-<version>.tar.gz` to theuncertain the air-gapped environment.
3. Upload to Artifactory and install on the Rocky Linux instance:
   ```bash
   ansible-galaxy collection install /path/to/collections/community-general-<version>.tar.gz -p /path/to/collections
   ```
4. Configure `ansible.cfg` to point to `http://<rocky-linux-host>:8080/api/galaxy/`.
5. Run `ansible-lint --offline playbook.yml` to verify.

---

This setup ensures `ansible-lint` can operate offline using Artifactory as a local Galaxy server. For further assistance, consult the JFrog Artifactory documentation (https://jfrog.com/help/) or the Ansible Community Documentation (https://docs.ansible.com).[](https://jfrog.com/help/r/jfrog-artifactory-documentation/ansible-repositories)[](https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html)
