---
# roles/windows_disk_management/README.md
# Windows Disk Management Role

This Ansible role manages disk configuration on Windows VMs in vSphere, including:
- Expanding the C drive to use all available space on its physical disk
- Initializing RAW/uninitialized physical drives
- Creating partitions on new drives with automatic drive letter assignment (starting from E:)
- Expanding existing partitions to use all available disk space

## Requirements

- Windows Server 2012 R2 or later / Windows 8.1 or later
- WinRM configured and accessible
- PowerShell 4.0 or later
- Ansible 2.9 or later with `community.windows` collection

Install the required collection:
```bash
ansible-galaxy collection install community.windows
```

## Role Variables

No variables are required. The role automatically detects and manages all disks.

## Example Playbook

```yaml
- hosts: windows_servers
  roles:
    - windows_disk_management
```

## Example Inventory

```ini
[windows_servers]
windows-vm-01 ansible_host=192.168.1.100

[windows_servers:vars]
ansible_user=Administrator
ansible_password=YourPassword
ansible_connection=winrm
ansible_winrm_transport=ntlm
ansible_winrm_server_cert_validation=ignore
ansible_port=5986
```

---
# roles/windows_disk_management/tasks/main.yml

- name: Get all disk facts
  community.windows.win_disk_facts:

- name: Expand C drive partition to maximum size
  community.windows.win_partition:
    drive_letter: C
    partition_size: -1
  register: c_drive_result

- name: Initialize RAW disks
  community.windows.win_initialize_disk:
    disk_number: "{{ item.number }}"
    style: gpt
  loop: "{{ ansible_disks | selectattr('partition_style', 'equalto', 'RAW') | list }}"
  register: initialized_disks

- name: Refresh disk facts after initialization
  community.windows.win_disk_facts:
  when: initialized_disks.changed

- name: Get used drive letters
  set_fact:
    used_letters: "{{ ansible_disks | selectattr('partitions', 'defined') | 
                      map(attribute='partitions') | flatten | 
                      selectattr('drive_letter', 'defined') | 
                      map(attribute='drive_letter') | list }}"

- name: Create partitions on newly initialized disks
  community.windows.win_partition:
    disk_number: "{{ item.0.number }}"
    drive_letter: "{{ item.1 }}"
    partition_size: -1
  vars:
    available_letters: "{{ range(69, 91) | map('int') | map('chr') | list }}"
    next_letters: "{{ available_letters | difference(used_letters) }}"
  loop: "{{ (ansible_disks | selectattr('partition_style', 'equalto', 'GPT') | 
            selectattr('partitions', 'undefined') | list) | 
            zip(next_letters) | list }}"
  when: initialized_disks.changed and 
        (ansible_disks | selectattr('partition_style', 'equalto', 'GPT') | 
         selectattr('partitions', 'undefined') | list | length > 0)

- name: Format newly created partitions
  community.windows.win_format:
    drive_letter: "{{ item.1 }}"
    file_system: ntfs
    new_label: "Data"
  vars:
    available_letters: "{{ range(69, 91) | map('int') | map('chr') | list }}"
    next_letters: "{{ available_letters | difference(used_letters) }}"
  loop: "{{ (ansible_disks | selectattr('partition_style', 'equalto', 'GPT') | 
            selectattr('partitions', 'undefined') | list) | 
            zip(next_letters) | list }}"
  when: initialized_disks.changed and 
        (ansible_disks | selectattr('partition_style', 'equalto', 'GPT') | 
         selectattr('partitions', 'undefined') | list | length > 0)

- name: Refresh disk facts after creating partitions
  community.windows.win_disk_facts:
  when: initialized_disks.changed

- name: Expand existing partitions on other disks
  community.windows.win_partition:
    disk_number: "{{ item.number }}"
    partition_number: "{{ item.partition_number }}"
    partition_size: -1
  loop: "{{ ansible_disks | selectattr('number', 'ne', 0) | 
            selectattr('partitions', 'defined') | 
            map(attribute='partitions') | flatten | 
            selectattr('drive_letter', 'defined') | 
            selectattr('drive_letter', 'ne', 'C') | list }}"
  loop_control:
    label: "Disk {{ item.number }} Partition {{ item.partition_number }} ({{ item.drive_letter }}:)"
  register: partition_expand_result
  failed_when: false

- name: Display final disk configuration
  community.windows.win_powershell:
    script: |
      Get-Disk | ForEach-Object {
        $disk = $_
        $partitions = Get-Partition -DiskNumber $disk.Number -ErrorAction SilentlyContinue | Where-Object {$_.DriveLetter}
        [PSCustomObject]@{
          DiskNumber = $disk.Number
          'Size (GB)' = [math]::Round($disk.Size / 1GB, 2)
          Partitions = ($partitions | ForEach-Object { "$($_.DriveLetter): $([math]::Round($_.Size / 1GB, 2))GB" }) -join ", "
        }
      } | Format-Table -AutoSize | Out-String
  register: final_config
  changed_when: false

- name: Show final disk configuration
  debug:
    msg: "{{ final_config.output | default([]) }}"

---
# roles/windows_disk_management/defaults/main.yml
# No default variables required for this role

---
# roles/windows_disk_management/meta/main.yml
galaxy_info:
  author: Ansible Administrator
  description: Windows disk management and expansion role for vSphere VMs
  company: Your Company
  license: MIT
  min_ansible_version: 2.9
  platforms:
    - name: Windows
      versions:
        - 2012R2
        - 2016
        - 2019
        - 2022
  galaxy_tags:
    - windows
    - disk
    - storage
    - partition
    - vsphere

dependencies: []

collections:
  - community.windows