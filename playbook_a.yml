---
- hosts: rocky_linux_servers
  become: yes
  vars:
    artifactory_url: "https://your-artifactory.company.com"
    
  tasks:
    - name: Verify Rocky Linux 9
      assert:
        that:
          - ansible_distribution == "Rocky"
          - ansible_distribution_major_version == "9"
        fail_msg: "This playbook requires Rocky Linux 9"
        
    - name: Configure DNF repositories to use Artifactory
      copy:
        content: |
          [rocky-baseos-internal]
          name=Rocky Linux 9 - BaseOS (Internal)
          baseurl={{ artifactory_url }}/artifactory/rockylinux-9/BaseOS/x86_64/os/
          enabled=1
          gpgcheck=1
          gpgkey={{ artifactory_url }}/artifactory/rockylinux-9/RPM-GPG-KEY-rockyofficial
          
          [rocky-appstream-internal]
          name=Rocky Linux 9 - AppStream (Internal)
          baseurl={{ artifactory_url }}/artifactory/rockylinux-9/AppStream/x86_64/os/
          enabled=1
          gpgcheck=1
          gpgkey={{ artifactory_url }}/artifactory/rockylinux-9/RPM-GPG-KEY-rockyofficial
        dest: /etc/yum.repos.d/rocky-internal.repo
        
    - name: Install nginx-acme dependencies only
      dnf:
        name:
          - python3
          - python3-pip
          - python3-devel
          - gcc
          - openssl-devel
          - libffi-devel
          - nginx
          # Note: NO certbot or acme.sh - nginx-acme handles ACME protocol directly
        state: present
        
    - name: Configure pip for Rocky Linux
      copy:
        content: |
          [global]
          index-url = {{ artifactory_url }}/artifactory/api/pypi/pypi/simple
          trusted-host = your-artifactory.company.com
        dest: /etc/pip.conf
        
    - name: Create nginx-acme user
      user:
        name: nginx-acme
        system: yes
        shell: /bin/false
        home: /opt/nginx-acme
        create_home: yes
        
    - name: Configure nginx for ACME challenges
      copy:
        content: |
          # ACME challenge location - nginx-acme will manage this
          location /.well-known/acme-challenge/ {
              root /var/lib/nginx-acme/challenges;
              try_files $uri =404;
          }
        dest: /etc/nginx/conf.d/acme-challenge.conf
      notify: reload nginx
      
    - name: Create ACME challenge directory
      file:
        path: /var/lib/nginx-acme/challenges/.well-known/acme-challenge
        state: directory
        owner: nginx-acme
        group: nginx
        mode: '0755'
        recurse: yes
        
    - name: Install nginx-acme systemd service
      copy:
        content: |
          [Unit]
          Description=NGINX ACME Certificate Manager
          After=network.target nginx.service
          Wants=nginx.service
          
          [Service]
          Type=simple
          User=nginx-acme
          Group=nginx-acme
          WorkingDirectory=/opt/nginx-acme
          ExecStart=/opt/nginx-acme/bin/nginx-acme --config /etc/nginx-acme/config.json
          Restart=always
          RestartSec=10
          
          # Allow nginx-acme to reload nginx configuration
          ExecReload=/bin/kill -HUP $MAINPID
          
          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/nginx-acme.service
      notify: reload systemd
      
    - name: Configure SELinux for nginx-acme (no certbot policies needed)
      seboolean:
        name: httpd_can_network_connect
        state: yes
        persistent: yes
      when: ansible_selinux.status == "enabled"
      
    - name: Create nginx-acme configuration
      copy:
        content: |
          {
            "acme_directory": "https://acme-v02.api.letsencrypt.org/directory",
            "account_key_path": "/etc/nginx-acme/account.key",
            "challenge_dir": "/var/lib/nginx-acme/challenges",
            "certificate_dir": "/etc/nginx-acme/certs",
            "nginx_config_dir": "/etc/nginx/conf.d",
            "reload_command": "systemctl reload nginx",
            "domains": []
          }
        dest: /etc/nginx-acme/config.json
        owner: nginx-acme
        group: nginx-acme
        mode: '0600'
        
  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes
    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded